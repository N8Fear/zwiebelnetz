// Generated by CoffeeScript 1.7.1
(function() {
  SecSocNet.ApplicationController = Ember.Controller.extend({
    init: function() {
      var token, user;
      this._super();
      user = Ember.$.cookie('auth_user');
      token = Ember.$.cookie('auth_token');
      if (!Ember.isEmpty(user) && !Ember.isEmpty(token)) {
        this.set('isAuthorized', true);
        return Ember.$.ajaxPrefilter(function(options, oriOptions, jqXHR) {
          jqXHR.setRequestHeader("Auth-User", user);
          return jqXHR.setRequestHeader("Auth-Token", token);
        });
      } else {
        return this.set("isAuthorized", false);
      }
    },
    hasError: false,
    actions: {
      ping: function() {
        return this.set('isAuthorized', true);
      },
      logout: function() {
        this.set('isAuthorized', false);
        this.set('username', "");
        this.set('password', "");
        Ember.$.removeCookie('auth_user');
        Ember.$.removeCookie('auth_token');
        return Ember.$.ajaxPrefilter(function(options, oriOptions, jqXHR) {
          jqXHR.setRequestHeader("Auth-User", "");
          return jqXHR.setRequestHeader("Auth-Token", "");
        });
      },
      authorize: function() {
        var context, pass, payload, user;
        user = this.get("username");
        pass = this.get("password");
        payload = "{\"Username\":\"" + user + "\",\"Password\":\"" + pass + "\"}";
        context = this;
        return $.ajax({
          type: "POST",
          url: "/api/authorize",
          data: payload,
          success: function(data, status, nil) {
            context.set("auth_token", data["auth_token"]);
            context.set("isAuthorized", true);
            context.set("hasError", false);
            Ember.$.cookie('auth_user', user);
            Ember.$.cookie('auth_token', data["auth_token"]);
            Ember.$.ajaxPrefilter(function(options, oriOptions, jqXHR) {
              jqXHR.setRequestHeader("Auth-User", user);
              return jqXHR.setRequestHeader("Auth-Token", data["auth_token"]);
            });
            return location.reload();
          },
          error: function(xhr, ajaxOptions, error) {
            context.set("password", "");
            return context.set("hasError", true);
          },
          dataType: "json"
        });
      }
    }
  });

}).call(this);
