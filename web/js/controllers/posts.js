// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  SecSocNet.PostsController = Ember.ArrayController.extend({
    sortAscending: false,
    sortProperties: ["postedAt"],
    ttl: [1, 2, 3, 4, 5],
    selectedTTL: 3,
    selectedCircles: null,
    allPosts: null,
    search: '',
    content: (function() {
      return this.get('allPosts');
    }).property('allPosts'),
    filterPosts: function() {
      var author, authors, circle, circles, posts, regexp, _i, _j, _len, _len1;
      if (this.get('search') === '') {
        return this.set('content', this.get('allPosts'));
      } else {
        posts = this.get('allPosts');
        authors = this.get('search').match(/author:"([\w|\s|\.]*)"/i);
        if (authors) {
          authors.shift();
          if (__indexOf.call(authors, "me") >= 0) {
            this.store.find('author', 1).then((function(_this) {
              return function(me) {
                return posts = posts.filter(function(item, index, self) {
                  return item.get('author.onion') === me.get('onion');
                });
              };
            })(this));
          } else {
            for (_i = 0, _len = authors.length; _i < _len; _i++) {
              author = authors[_i];
              regexp = new RegExp(author, "i");
              posts = posts.filter(function(item, index, self) {
                return item.get('author.onion').match(regexp);
              });
            }
          }
          this.set('content', posts);
        }
        circles = this.get('search').match(/circle:"([\w|\s|\.]*)"/i);
        if (circles) {
          circles.shift();
          for (_j = 0, _len1 = circles.length; _j < _len1; _j++) {
            circle = circles[_j];
            regexp = new RegExp(circle, "i");
            posts = posts.filter(function(item, index, self) {
              return item.get('circles').any(function(circ) {
                return circ.get('name').match(regexp);
              });
            });
          }
          return this.set('content', posts);
        }
      }
    },
    searchPostsObserver: (function() {
      return Ember.run.debounce(this, this.filterPosts, 500);
    }).observes('search'),
    actions: {
      addCircle: function(id) {},
      removeCircle: function(id) {},
      createPost: function() {
        var author, message, originator;
        message = this.get('message');
        if (!message.trim()) {
          return;
        }
        originator = this.store.find('originator', 1);
        author = this.store.find('author', 1);
        return Ember.RSVP.all([originator, author]).then((function(_this) {
          return function() {
            var circle_ids, post;
            post = _this.store.createRecord('post', {
              originator: originator,
              author: author,
              message: message,
              ttl: _this.get("selectedTTL")
            });
            circle_ids = $('.select2-container').select2("val");
            return _this.store.find('circle', {
              ids: circle_ids
            }).then(function(circles) {
              post.get('circles').pushObjects(circles);
              return post.save().then(function() {
                return _this.set("message", "");
              }, function() {
                return alert("Something went wrong");
              });
            });
          };
        })(this));
      }
    }
  });

}).call(this);
