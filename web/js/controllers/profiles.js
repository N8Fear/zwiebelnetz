// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  SecSocNet.ProfilesController = Ember.ArrayController.extend({
    allProfiles: null,
    content: (function() {
      return this.get('allProfiles');
    }).property('allProfiles'),
    selectedCircles: [],
    myOnion: (function() {
      return this.store.find('onion', 1);
    }).property(),
    picture: (function() {
      var pic;
      pic = 'img/no_profile_picture.jpg';
      if (this.get('allProfiles')) {
        this.get('allProfiles').forEach(function(profile) {
          if (profile.get('key') === 'picture') {
            return pic = "data:image/jpg;base64," + profile.get('value');
          }
        });
      }
      return pic;
    }).property('allProfiles.@each'),
    selfContact: (function() {
      return this.store.find('contact', 1);
    }).property(),
    profileKey: "",
    profileValue: "",
    search: "",
    filterProfiles: function() {
      var regexp;
      if (this.get('search') === '') {
        return this.set('content', this.get('allProfiles'));
      } else {
        regexp = new RegExp(this.get('search'), "i");
        return this.set('content', this.get('allProfiles').filter(function(item, index, self) {
          var circleMatched;
          circleMatched = item.get('circles').any(function(circ) {
            return circ.get('name').match(regexp);
          });
          return circleMatched || item.get('key').match(regexp) || item.get('value').match(regexp);
        }));
      }
    },
    searchProfilesObserver: (function() {
      return Ember.run.debounce(this, this.filterProfiles, 500);
    }).observes('search'),
    actions: {
      addCircle: function(id) {
        return this.get('selectedCircles').push(id);
      },
      removeCircle: function(id) {
        var idx;
        idx = this.get('selectedCircles').indexOf(id);
        if (idx !== -1) {
          return this.get('selectedCircles').splice(idx, 1);
        }
      },
      createProfile: function() {
        var key, profile, value;
        key = this.get('profileKey');
        value = this.get('profileValue');
        if (!(key.trim() && value.trim())) {
          return;
        }
        profile = this.store.createRecord('profile', {
          key: key,
          value: value
        });
        return this.store.filter('circle', {}, (function(_this) {
          return function(circle) {
            var _ref;
            return _ref = parseInt(circle.id), __indexOf.call(_this.get('selectedCircles'), _ref) >= 0;
          };
        })(this)).then((function(_this) {
          return function(_circles) {
            return profile.get('circles').then(function(_circs) {
              _circs.pushObjects(_circles);
              return profile.save().then(function() {
                _this.set('profileKey', "");
                _this.set('profileValue', "");
                return _this.store.find('onion', 1).then(function(_myOnion) {
                  return _myOnion.get('profiles').then(function(_profiles) {
                    return _profiles.pushObject(profile);
                  });
                });
              }, (function() {}));
            });
          };
        })(this));
      }
    }
  });

}).call(this);
