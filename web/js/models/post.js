// Generated by CoffeeScript 1.7.1
(function() {
  SecSocNet.Post = DS.Model.extend({
    message: DS.attr('string'),
    createAt: DS.attr('string', {
      defaultValue: function() {
        return new Date().toISOString();
      }
    }),
    postedAt: DS.attr('string', {
      defaultValue: function() {
        return new Date().toISOString();
      }
    }),
    updatedAt: DS.attr('string', {
      defaultValue: function() {
        return new Date().toISOString();
      }
    }),
    ttl: DS.attr('number'),
    profilePictureId: DS.attr('number'),
    author: DS.belongsTo('author', {
      async: true
    }),
    originator: DS.belongsTo('originator', {
      async: true
    }),
    circles: DS.hasMany('circle', {
      async: true
    }),
    comments: DS.hasMany('comment', {
      async: true
    }),
    profilePicture: "img/no_profile_picture.jpg",
    profilePictureCall: (function() {
      var profile;
      if (this.get('profilePictureId') > 0) {
        return profile = this.store.find('profile', this.get('profilePictureId')).then((function(_this) {
          return function(_profile) {
            return _this.set('profilePicture', "data:image/jpg;base64," + _profile.get('value'));
          };
        })(this));
      } else {
        return this.set('profilePicture', "img/no_profile_picture.jpg");
      }
    }).property('profilePictureId'),
    contactAlias: "",
    contact: (function() {
      return this.get('author').then((function(_this) {
        return function(_author) {
          return _author.get('contact').then(function(_contact) {
            return _this.set('contactAlias', _contact.get('alias'));
          });
        };
      })(this));
    }).property('author'),
    circleString: "",
    circleCall: (function() {
      return this.get('circles').then((function(_this) {
        return function(_circles) {
          var circle, str, _i, _len, _ref;
          str = "";
          _ref = _circles.content;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            circle = _ref[_i];
            str += "@" + circle.get('name') + " ";
          }
          return _this.set('circleString', str);
        };
      })(this));
    }).property('circles'),
    createdAtFromNow: (function() {
      return moment(this.get('postedAt')).fromNow();
    }).property('postedAt'),
    postHeader: (function() {
      this.get('profilePictureCall');
      this.get('contact');
      if (this.get('author.id') === '1') {
        this.get('circleCall');
        return "You posted " + this.get('circleString') + " - " + this.get('createdAtFromNow');
      } else {
        return this.get('contactAlias') + " ( " + this.get('author.onion') + " ) - " + this.get('createdAtFromNow');
      }
    }).property('createdAtFromNow', 'author.id', 'author.onion', 'contactAlias', 'circleString')
  });

}).call(this);
