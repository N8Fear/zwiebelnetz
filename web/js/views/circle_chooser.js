// Generated by CoffeeScript 1.7.1
(function() {
  var format, formatWrapper;

  SecSocNet.CircleSelectView = Ember.View.extend({
    tagName: 'div',
    width: '55%',
    placeholder: "Share with",
    attributeBindings: ['circleInit', 'selected', 'width'],
    controllerToView: (function() {
      return this.$().select2('val', this.get('circleInit').mapBy('id'));
    }).observes('circleInit.@each'),
    didInsertElement: function() {
      if (!this.$().select2) {
        console.log("select2 is required for SelectOrder");
      }
      this.$().select2({
        multiple: true,
        placeholder: this.get('placeholder'),
        width: this.get('width'),
        ajax: {
          headers: {
            "Auth-User": $.cookie('auth_user'),
            "Auth-Token": $.cookie('auth_token')
          },
          url: "/api/circles",
          async: false,
          results: function(data, page, query) {
            var categories, children, filteredResults, regexp;
            regexp = new RegExp(query.term);
            filteredResults = data.circles.filter(function(item) {
              return item.name.match(regexp);
            });
            categories = [];
            children = filteredResults.filter(function(item) {
              return item.creator === 1 || item.name === "Public";
            });
            if (children.length > 0) {
              categories.push({
                text: 'Circles',
                children: children
              });
            }
            children = filteredResults.filter(function(item) {
              return item.creator === 0 && item.name !== "Public";
            });
            if (children.length > 0) {
              categories.push({
                text: 'Contacts',
                children: children
              });
            }
            return {
              results: categories
            };
          }
        },
        formatResult: format,
        formatSelection: format,
        dropdownCssClass: "bigdrop",
        tokenSeparators: [",", " "],
        initSelection: function(element, callback) {
          var id, ids, uri, _i, _len;
          ids = element.val().split(",");
          uri = "/api/circles?";
          id = ids.pop();
          if (!id.trim()) {
            return;
          }
          uri += "ids%5B%5D=" + id;
          for (_i = 0, _len = ids.length; _i < _len; _i++) {
            id = ids[_i];
            uri += "&ids%5B%5D=" + id;
          }
          return $.ajax(uri, {
            headers: {
              "Auth-User": $.cookie('auth_user'),
              "Auth-Token": $.cookie('auth_token')
            }
          }).done(function(data) {
            return callback(data.circles);
          });
        }
      });
      if (this.get('circleInit') && this.get('circleInit').isFulfilled) {
        this.$().select2('val', this.get('circleInit').mapBy('id'));
      }
      return this.$().on("change", (function(_this) {
        return function(event) {
          if (event.added) {
            _this.get('controller').send('addCircle', event.added.id);
          }
          if (event.removed) {
            return _this.get('controller').send('removeCircle', event.removed.id);
          }
        };
      })(this));
    }
  });

  formatWrapper = function(object, container, query) {
    return format(object);
  };

  format = function(object) {
    if (object.text) {
      return object.text;
    }
    if (object.creator === 0 && object.name !== "Public") {
      return "<span class=\"glyphicon glyphicon-user\"></span> " + object.name;
    } else {
      return "<span class=\"glyphicon\"><img src='img/group.png'></span> " + object.name;
    }
  };

}).call(this);
